name: Deploy to AWS ECS

on:
  push:
    branches:
      - master

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build Docker Image
        run: docker build -t booking-web .
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
#TO DO Add caching https://docs.docker.com/build/cache/backends/gha/
#we could also use github.sha to tag the images so we don't overwrite the image on the ECR
#and also make this more DRY by putting booking-web into a variable
      - name: Build, tag, and push Docker Image to ECR
        id: build-image
        env:
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          IMAGE=${{ steps.login-ecr.outputs.registry}}/booking-web:latest
        run: |
          echo $IMAGE
          echo $ECR_REGISTRY
          docker tag booking-web:latest $IMAGE \
          && docker push $IMAGE
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
#if we use different image names we have to prepare the task definition   
      - name: Prepare ECS task definition
        id: task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: booking-web
          image: ${{ steps.build-image.outputs.image }}
      - name: Deploy Amazon ECS task-definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-definition.outputs.task-definition }}
          service: booking-web
          cluster: booking

